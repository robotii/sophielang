// Infinite iterator demonstrating that Sequence.where is not eager
class FibIterator {
  new {
    @current = 0
    @next = 1
  }

  iterate {
    var sum = @current + @next
    @current = @next
    @next = sum
  }

  value { @current }
}

class Fib is Sequence {
  iterate(iterator) {
    if (iterator == null) return new FibIterator
    iterator.iterate
    return iterator
  }

  iteratorValue(iterator) { iterator.value }
}

var largeFibs = (new Fib).where {|fib| fib > 100 }
var iterator = null

System.print(largeFibs is Sequence) // expect: true
System.print(largeFibs) // expect: instance of WhereSequence

iterator = largeFibs.iterate(iterator)
System.print(largeFibs.iteratorValue(iterator)) // expect: 144

iterator = largeFibs.iterate(iterator)
System.print(largeFibs.iteratorValue(iterator)) // expect: 233

iterator = largeFibs.iterate(iterator)
System.print(largeFibs.iteratorValue(iterator)) // expect: 377
